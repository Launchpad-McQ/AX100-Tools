%% UHFLayer2Decapsulate.m

% Olof Sj√∂din <me@olofsjodin.se> 2017
% KTH Royal institute of Technology
% School of Electrical Engineering, SPP

% Input parameters
syncSeqHex = 'c985a8ef';
dummyDataStream = '555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555930b51de89a8107000000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455000000955d34dc5d5e5f606162638599b3cf567a44c4bf2e79102e8c9eeb72ab8930b51de89a8107600000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f60616263ce4023cc1d5c13df767d8ea328ec9ab63f935e0af0bcf87eef7c2c1b6e8e4a35930b51de89a810770000010203930b51de89a8107600000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f60616263ce4023cc1d5c13df767d8ea328ec9ab63f935e0af0bcf87eef7c2c1b6e8e4a35930b51de89a810770000010203930b51de89a8107600000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f60616263ce4023cc1d5c13df767d8ea328ec9ab63f935e0af0bcf87eef7c2c1b6e8e4a35930b51de89a810770000010203930b51de89a8107600000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f60616263ce4023cc1d5c13df767d8ea328ec9ab63f935e0af0bcf87eef7c2c1b6e8e4a35930b51de89a810770000010203930b51de89a8107600000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f60616263ce4023cc1d5c13df767d8ea328ec9ab63f935e0af0bcf87eef7c2c1b6e8e4a35930b51de89a810770000010203930b51de89a8107600000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f60616263ce4023cc1d5c13df767d8ea328ec9ab63f935e0af0bcf87eef7c2c1b6e8e4a35930b51de89a810770000010203930b51de89a8107600000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f60616263ce4023cc1d5c13df767d8ea328ec9ab63f935e0af0bcf87eef7c2c1b6e8e4a35930b51de89a810770000010203930b51de89a8107600000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f60616263ce4023cc1d5c13df767d8ea328ec9ab63f935e0af0bcf87eef7c2c1b6e8e4a35930b51de89a810770000010203';
dummyDataStream = '55930B51DE3662157D00FF00FFFFFF00F7200210010000008508BF903BD46C3891C802A68DF19011A2F7373574D5DF7729E3C80D33F6BA9EF2DAF51DBBDA8BF4DDF6EF1AF0A3B4A169C8C228'

dataStream = hexStrToBinArr(dummyDataStream);
[synci, packetL, pac] = findSync(syncSeqHex, dataStream);

% TODO: add the rest of the data stream on queue again
% TODO: What happens if the message is longer than 255 bytes while in RS?

%% Reed-Solomon Decoder
n=49;
k=49-32;

% Transform the bit array to an array of integers in GF(8)

ints = [];
for i=1:8:length(pac)
    ints = [ints bi2de(pac(i:i+7), 'left-msb')];
end

decoded = rsdec(gf(ints, 8), n, k);
decoded = decoded.x;

binaryOut = []
for i=1:length(decoded)
    tempBin = de2bi(decoded(i),'left-msb');
    if length(tempBin) < 8
        tempBin = [zeros(1, 8-length(tempBin)) tempBin];
    end
    binaryOut = [binaryOut tempBin];
end

output = binArrToHexStr(binaryOut);




%% Payload stripping

cspHeader = binaryOut(1:32);
packet = binaryOut(33+1:end);

% synci in this case is 97*4=388
%
%% Extract the packet from the data stream with the length parameter

% We are assuming that the length parameter is the length of the packet plus the
% length parameter

hexoutput = binArrToHexStr(packet);